exports.getPendingImages = catchAsyncErrors(async (req, res, next) => {
  const { query = "", page = 1, limit = 10, country } = req.query;

  // Initialize search criteria
  let searchCriteria = { isLive: false };

  // Check user role
  if (req.user.role === "superadmin") {
    // Superadmin can filter by any country if provided
    if (country) {
      searchCriteria.country = country;
    }
  } else if (req.user.role === "admin") {
    // Admin can only see their own country's images
    searchCriteria.country = req.user.country;
  } else {
    // Unauthorized access
    return next(new ErrorHandler("You are not authorized to perform this action", 403));
  }

  if (query) {
    // Create search filter
    searchCriteria = {
      ...searchCriteria,
      $or: [
        { title: { $regex: query, $options: "i" } }, // Search by title
        { "ownerDetails.username": { $regex: query, $options: "i" } }, // Search by owner's username
        { "ownerDetails.email": { $regex: query, $options: "i" } }, // Search by owner's email
      ],
    };
  }

  try {
    // Use aggregate pipeline for search
    const totalImages = await Image.aggregate([
      {
        $lookup: {
          from: "users",
          localField: "owner",
          foreignField: "_id",
          as: "ownerDetails",
        },
      },
      { $unwind: "$ownerDetails" },
      { $match: searchCriteria },
      { $count: "total" },
    ]);

    const totalImagesCount = totalImages[0]?.total || 0;

    const images = await Image.aggregate([
      {
        $lookup: {
          from: "users",
          localField: "owner",
          foreignField: "_id",
          as: "ownerDetails",
        },
      },
      { $unwind: "$ownerDetails" },
      { $match: searchCriteria },
      { $sort: { uploaded_at: -1 } },
      { $skip: (page - 1) * limit },
      { $limit: parseInt(limit) },
    ]);

    // If no images found
    if (!images.length) {
      return next(new ErrorHandler("No Image found", 404));
    }

    // Send paginated response
    res.status(200).json({
      success: true,
      totalImages: totalImagesCount,
      currentPage: page,
      totalPages: Math.ceil(totalImagesCount / limit),
      images,
    });
  } catch (error) {
    return next(new ErrorHandler("Failed to fetch images", 500));
  }
});

const mongoose = require("mongoose");
const User = require("./User");

imageSchema.pre("remove", async function (next) {
  try {
    // Remove image reference from users who liked it
    await User.updateMany(
      { _id: { $in: this.likes } },
      { $pull: { likedImages: this._id } } // Remove from user's likedImages list
    );

    // Remove other references related to this image if needed
    // Example: Sold details, competitions, etc.
    next();
  } catch (error) {
    next(error);
  }
});

const Image = mongoose.model("Image", imageSchema);
module.exports = Image;


const mongoose = require("mongoose");
const User = require("./User");
const Image = require("./Image");

userSchema.pre("remove", async function (next) {
  try {
    // Remove all images uploaded by this user
    await Image.deleteMany({ owner: this._id });
    next();
  } catch (error) {
    next(error);
  }
});

const User = mongoose.model("User", userSchema);
module.exports = User;


