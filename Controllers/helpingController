const express = require("express");
const mongoose = require("mongoose");
const Transaction = require("../models/Transaction");
const User = require("../models/User");

const router = express.Router();

// API to fetch a user's transaction summary
router.get("/user-transactions/:userId", async (req, res) => {
  const { userId } = req.params;

  try {
    // Check if user exists
    const userExists = await User.findById(userId);
    if (!userExists) {
      return res.status(404).json({ error: "User not found" });
    }

    // Aggregate the user's transaction data
    const transactions = await Transaction.aggregate([
      { $match: { user: user._id, type: "purchase" } },
      {
        $group: {
          _id: "$item",
          totalAmount: { $sum: "$amount" }, 
          totalPrice: { $sum: "$price" },  
        },
      },
    ]);

    // Structure the response data
    const result = {
      userId,
      transactions: {
        coins: {
          totalAmount: 0,
          totalPrice: 0,
        },
        images: {
          totalAmount: 0,
          totalPrice: 0,
        },
        space: {
          totalAmount: 0,
          totalPrice: 0,
        },
      },
    };

    // Map aggregated data to response format
    transactions.forEach((item) => {
      if (item._id === "coin") {
        result.transactions.coins.totalAmount = item.totalAmount;
        result.transactions.coins.totalPrice = item.totalPrice;
      } else if (item._id === "image") {
        result.transactions.images.totalAmount = item.totalAmount;
        result.transactions.images.totalPrice = item.totalPrice;
      } else if (item._id === "space") {
        result.transactions.space.totalAmount = item.totalAmount;
        result.transactions.space.totalPrice = item.totalPrice;
      }
    });

    res.status(200).json(result);
  } catch (error) {
    console.error("Error fetching transactions:", error);
    res.status(500).json({ error: "Internal server error" });
  }
});

module.exports = router;

// non withdrawablecoins

exports.nonWithdreableCoins(catchAsyncError( async (req, res) => {
  const { userId } = req.params;

  try {
  
    const user = await User.findById(userId);
    if (!user) {
      return res.status(404).json({ error: "User not found" });
    }


    const totalReferralBonus = user.referred_users_details.reduce(
      (sum, referral) => sum + referral.referralBonus,
      0
    );

    const totalAdAwardedCoins = user.adDetails.reduce(
      (sum, ad) => sum + (ad.awardedCoin || 0),
      0
    );

   
    const totalNonWithdrawableCoins = totalReferralBonus + totalAdAwardedCoins;

    
    res.status(200).json({
      userId,
      totalReferralBonus,
      totalAdAwardedCoins,
      totalNonWithdrawableCoins,
    });
  } catch (error) {
    console.error("Error fetching non-withdrawable coins:", error);
    res.status(500).json({ error: "Internal server error" });
  }
}));

module.exports = router;


// accourate hour
const allHours = Array.from({ length: 24 }, (_, i) => {
  const hour = i === 0 ? 12 : i % 12; 
  const period = i < 12 ? "AM" : "PM"; 
  return `${hour} ${period}`;
});

const formattedData = allHours.map((hour, index) => {
  const data = intervalData.find((item) => parseInt(item._id.split(":")[0], 10) === index); // Match with 24-hour index
  return {
    hour, // 12-hour format string
    count: data ? data.count : 0,
    totalEarnings: data ? data.totalEarnings : 0,
  };
});


